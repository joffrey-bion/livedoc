def execute = { String[] command ->
    exec {
        println command.join(' ')
        if (System.getProperty('os.name').toLowerCase().contains('windows')) {
            command = ['cmd', '/c'] + (command as List)
        }
        workingDir rootProject.projectDir
        commandLine command
    }
}

task syncVersion {
}

task commitRelease {
    doLast {
        execute 'git', 'add', 'build.gradle'
        execute 'git', 'add', 'CHANGELOG.md'
        execute 'git', 'add', 'docs/_config.yml'
        execute 'git', 'add', 'livedoc-ui-webjar/package.json'
        execute 'git', 'commit', '-m', "Version ${project.version}"
        execute 'git', 'push'
    }
}
commitRelease.dependsOn(syncVersion)
commitRelease.dependsOn(generateChangelog)

task tagRelease {
    doLast {
        execute 'git', 'tag', '-a', "v${project.version}", '-m', "Version ${project.version}"
        execute 'git', 'push', 'origin', "v${project.version}"
        println "Generated tag for version ${project.version}"
    }
}
tagRelease.mustRunAfter(commitRelease)

task release(dependsOn: ['commitRelease', 'tagRelease'])
