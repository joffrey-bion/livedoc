def execute = { String[] command ->
    exec {
        println command.join(' ')
        if (System.getProperty('os.name').toLowerCase().contains('windows')) {
            command = ['cmd', '/c'] + (command as List)
        }
        workingDir rootProject.projectDir
        commandLine command
    }
}

def getChangelogReleaseUrlBeginning = {
    try {
        Properties props = new Properties()
        props.load(new FileInputStream('.github_changelog_generator'))
        String versionUrlTemplate = props.getProperty('release-url')
        int versionIndex = versionUrlTemplate.indexOf('%s')
        if (versionIndex < 0) {
            return null
        }
        return versionUrlTemplate.substring(0, versionIndex)
    }
    catch (Exception e) {
        return null
    }
}

task generateChangeLog {
    doLast {
        execute 'github_changelog_generator', '--no-verbose', '--future-release', "v${project.version}"
        // fix the bintray links (remove V prefix)
        String changelogFile = 'CHANGELOG.md'
        String changelogContents = new File(changelogFile).getText('UTF-8')
        String releaseUrlStart = getChangelogReleaseUrlBeginning()
        if (releaseUrlStart != null) {
            changelogContents = changelogContents.replaceAll(releaseUrlStart + 'v', releaseUrlStart)
            new File(changelogFile).write(changelogContents, 'UTF-8')
        }
    }
}

task commitRelease {
    doLast {
        execute 'git', 'add', 'build.gradle'
        execute 'git', 'add', 'CHANGELOG.md'
        execute 'git', 'commit', '-m', "Version ${project.version}"
        execute 'git', 'push'
    }
}
commitRelease.dependsOn(generateChangeLog)

task tagRelease {
    doLast {
        execute 'git', 'tag', '-a', "v${project.version}", '-m', "Version ${project.version}"
        execute 'git', 'push', 'origin', "v${project.version}"
        println "Generated tag for version ${project.version}"
    }
}
tagRelease.mustRunAfter(commitRelease)

task release(dependsOn: ['commitRelease', 'tagRelease'])
