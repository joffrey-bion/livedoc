buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

allprojects {
    group = 'org.hildan.livedoc'
    version = '4.3.2'
    ext.labels = ['doc', 'documentation', 'generation', 'annotation', 'java', 'rest', 'websocket', 'api']
    ext.licenses = ['MIT']
}

def getPropOrEnv = { String prop, String envVar, String defaultValue = null ->
    if (project.hasProperty(prop)) {
        return project.property(prop)
    }
    return System.getenv(envVar) ?: defaultValue
}

ext {
    githubUser = getPropOrEnv('githubUser', 'GITHUB_USER')
    githubRepoName = rootProject.name
    githubSlug = "$githubUser/$githubRepoName"
    githubRepoUrl = "https://github.com/$githubSlug"
    ossrhUserToken = getPropOrEnv('ossrhUserToken', 'OSSRH_USER_TOKEN')
    ossrhKey = getPropOrEnv('ossrhKey', 'OSSRH_KEY')
    dockerUser = getPropOrEnv('dockerUser', 'DOCKER_USER')
}

def pomConfig = {
    scm {
        url githubRepoUrl
        connection 'scm:git:' + githubRepoUrl + '.git'
        developerConnection 'scm:git:git@github.com:' + githubSlug + '.git'
    }
    licenses {
        license {
            name 'The MIT License'
            url 'https://opensource.org/licenses/MIT'
        }
    }
    developers {
        developer {
            name 'Joffrey Bion'
            email 'joffrey.bion@gmail.com'
        }
    }
}

apply from: 'gradle/scripts/release.gradle'

subprojects {
    apply plugin: 'checkstyle'

    repositories {
        mavenCentral()
    }

    configurations {
        checkstyleConfig
    }

    dependencies {
        checkstyleConfig 'org.hildan.checkstyle:checkstyle-config:2.1.0'
    }

    checkstyle {
        maxWarnings = 0
        toolVersion = '8.8'
        config = resources.text.fromArchiveEntry(configurations.checkstyleConfig, "checkstyle.xml")
    }

    tasks.withType(JavaCompile) {
        // detailed messages for unchecked operations
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

// configure java-library
configure(subprojects.findAll {it.name != 'sample-app'}) {
    apply plugin: 'java-library'

    processResources {
        expand(projectVersion: project.version, buildDate: getDate())
    }
}

def static getDate() {
    def date = new Date()
    def formattedDate = date.format('MMM d, yyyy')
    return formattedDate
}

// configure bintray/maven artifacts upload
configure(subprojects.findAll {it.name != 'sample-app'}) {
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    afterEvaluate {
        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        publishing {
            publications {
                maven(MavenPublication) {
                    from components.java
                    artifact sourcesJar
                    artifact javadocJar
                    pom.withXml {
                        def root = asNode()
                        root.appendNode('name', project.name)
                        root.appendNode('description', project.description)
                        root.appendNode('url', githubRepoUrl)
                        root.children().last() + pomConfig
                    }
                }
            }
        }

        bintray {
            user = getPropOrEnv('bintrayUser', 'BINTRAY_USER')
            key = getPropOrEnv('bintrayApiKey', 'BINTRAY_KEY')
            publications = ['maven']
            publish = true

            pkg {
                repo = getPropOrEnv('bintrayRepoLibs', 'BINTRAY_REPO_LIBS')
                name = project.name
                desc = project.description
                labels = project.labels ?: [project.name]
                licenses = project.licenses ?: []

                websiteUrl = githubRepoUrl
                issueTrackerUrl = githubRepoUrl + '/issues'
                vcsUrl = githubRepoUrl + '.git'
                githubRepo = githubSlug

                version {
                    desc = project.description
                    vcsTag = 'v' + project.version
                    gpg { sign = true }
                    mavenCentralSync {
                        sync = true
                        user = ossrhUserToken
                        password = ossrhKey
                    }
                }
            }
        }
        bintrayUpload.dependsOn(build)
        rootProject.tasks.release.dependsOn(bintrayUpload)
    }
}

